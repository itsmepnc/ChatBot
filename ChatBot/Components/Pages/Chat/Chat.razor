@page "/"
@using System.ComponentModel
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>To get started, try asking about these example documents. You can replace these with your own data and replace this message.</div>
        <ChatCitation File="KSFC - EG Module - SRS - V 2 (Final).pdf" />
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
    <SurveyPrompt /> @* Remove this line to eliminate the template survey message *@
</div>

@code {
    // // private const string SystemPrompt = @"
    // //     You are an assistant who answers questions about information you retrieve.
    // //     Do not answer questions about anything else.
    // //     Use only simple markdown to format your responses.

    // //     Use the search tool to find relevant information. When you do this, end your
    // //     reply with citations in the special XML format:

    // //     <citation filename='string' page_number='number'>exact quote here</citation>

    // //     Always include the citation in your response if there are results.

    // //     The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.
    // //     Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.
    // //     ";

    private const string SystemPrompt = @"
You are a local assistant whose answers MUST be based only on the supplied retrieved passages.
Answer ALL user questions ONLY in Simple English. Use short sentences and plain words. Avoid technical jargon; prefer common everyday vocabulary. Keep replies concise and focused.

When the provided retrieved passages contain relevant information, you MUST append one or more citation tags at the very end of your reply in this exact XML format (no extra text after them):

<citation filename='string' page_number='number'>exact quote here</citation>

Citation rules:
1. The inner text of each citation must be an exact verbatim quote taken from one of the supplied retrieved passages.
2. The quote must be at most five (5) words long.
3. The page_number and filename must match values supplied in the retrieval context.
4. If multiple relevant sources exist, include multiple <citation ...> tags (each on the same line or separate lines) — but still only at the end.
5. If there are NO relevant retrieved passages, DO NOT emit any <citation> tag. Instead reply in Simple English with the exact text: 'Sorry, I don't have information about that.' and nothing else.

Additional constraints:
- Do NOT invent facts, quotes, sources, or page numbers. If you cannot support an answer from the supplied passages, say you do not know (use the sentence in rule #5) and do not provide citations.
- If I provide an explicit exact 5-word citation_quote in the prompt, use that exact string in the <citation> tag.
- Use simple formatting (very light Markdown only). Keep sentences short (one idea per sentence). Use active voice and plain verbs.
";


    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Display a new response from the IChatClient, streaming responses
        // aren't supported because Ollama will not support both streaming and using Tools
        currentResponseCancellation = new();
        var response = await ChatClient.GetResponseAsync(messages, chatOptions, currentResponseCancellation.Token);

        // Store responses in the conversation, and begin getting suggestions
        messages.AddMessages(response);
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
