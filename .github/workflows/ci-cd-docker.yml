name: CI/CD - Build, Publish Docker, Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/itsmepnc/chatbot

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore ChatBot/ChatBot.csproj

      - name: Build
        run: dotnet build ChatBot/ChatBot.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ChatBot/ChatBot.csproj -c Release -o publish /p:UseAppHost=false

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT  }}

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.prod -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Push Docker images
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Check deploy secrets
        shell: bash
        run: |
          # If either deploy secret is empty, skip deploy gracefully
          if [ -z "${{ secrets.DEPLOY_HOST }}" ] || [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Deploy secrets not configured; skipping deploy job."
            exit 0
          fi
      - name: Setup SSH agent
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pull image & restart container on remote
        env:
          IMAGE: ${{ env.IMAGE_NAME }}:latest
          USER: ${{ secrets.DEPLOY_USER }}
          HOST: ${{ secrets.DEPLOY_HOST }}
          PORT: ${{ secrets.DEPLOY_SSH_PORT }}
          CONTAINER: ${{ secrets.DOCKER_CONTAINER_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no -p ${PORT:-22} ${USER}@${HOST} "
            docker pull ${IMAGE} &&
            docker stop ${CONTAINER} || true &&
            docker rm ${CONTAINER} || true &&
            docker run -d --name ${CONTAINER} -p 8080:8080 --restart unless-stopped ${IMAGE}
          "




